1. Where is the assertEquals method defined? What does it do? Can we use assertEquals for more than just int types? (Hint: Consult the API for JUnit)
AssertEquals method is defined in the class of Assert extending java.lang.Object.
assertEquals() is used to validate two values are equal. Basically it is used in test method. This method asserts that the first two arguments, x and y are the same, if they are not a runtime exception is thrown. Usage is salesforce will consider a testmethod is passed only if Assertion is passed.
Yes. Byte, char, int, long, short, object are all compilable.

2. Briefly describe what each of the three tests is checking.
The first test is to check if the return value of DiffUtil.findSmallestDiff(arr1) is -1. The second test is to check if the return value of DiffUtil.findSmallestDiff(arr2) is 0. The third test is to check if the return value of DiffUtil.findSmallestDiff(arr3) is 4.

3. Why is our unimplemented findSmallestDiff method passing one of the tests?
Because the return value of our findSmallestDiff function is 0 and test2 assertEquals 0.

4. Why are we failing the third test? How should our method be modified to correct this?
Because the return value of test3 is -8. The findSmallestDiff function we implemented actually returns the smallest difference of tow adjacent elements in the array. The difference can be negative numbers which are small in value.
To correct it, use absolute value of the deference:
int diff = a[0] - a[1]; => int diff = Math.abs(a[0] - a[1]);
int tmp_diff = a[i] - a[j]; => int tmp_diff = Math.abs(a[I] - a[j]);

5. What is the appropriate call to assertEquals for your new test (test 4)?
arr4 = new int[] { -4,-1,2,5,8 };
public void allSameDiff() {
        assertEquals(3, DiffUtil.findSmallestDiff(arr4));
    }

6. Provide one more test (test 5) for the findSmallestDiff method. Briefly describe your test and write the call to assertEquals here.
arr5 = new int[] { -4,-1,2,3,4 };
public void multiSmallestDiff() {
        assertEquals(1, DiffUtil.findSmallestDiff(arr5 ));
    }
I create this test to see if the function can return the right smallest difference when there are multiple same differences.

7. Briefly describe your unit tests for Assignment 1.
I have 5 tests for my function. I tested the situation where the array is empty, or all the elements in the array are the same, or some random integers, or there are multiple smallest differences, or the differences are the same. Besides, I set up and clear all the arrays before and after each test to decouple the tests. Most importantly, I corrected the findSmallestDiff function to make it fulfill the task of finding the smallest differences of the array.


